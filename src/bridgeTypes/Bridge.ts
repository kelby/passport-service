/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Bridge {
  export type ProposalStruct = {
    _resourceID: PromiseOrValue<BytesLike>;
    _dataHash: PromiseOrValue<BytesLike>;
    _yesVotes: PromiseOrValue<string>[];
    _noVotes: PromiseOrValue<string>[];
    _status: PromiseOrValue<BigNumberish>;
    _proposedBlock: PromiseOrValue<BigNumberish>;
  };

  export type ProposalStructOutput = [
    string,
    string,
    string[],
    string[],
    number,
    BigNumber
  ] & {
    _resourceID: string;
    _dataHash: string;
    _yesVotes: string[];
    _noVotes: string[];
    _status: number;
    _proposedBlock: BigNumber;
  };
}

export interface BridgeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "RELAYER_ROLE()": FunctionFragment;
    "_chainID()": FunctionFragment;
    "_depositCounts(uint8)": FunctionFragment;
    "_depositRecords(uint64,uint8)": FunctionFragment;
    "_expiry()": FunctionFragment;
    "_fee()": FunctionFragment;
    "_hasVotedOnProposal(uint72,bytes32,address)": FunctionFragment;
    "_proposals(uint72,bytes32)": FunctionFragment;
    "_relayerThreshold()": FunctionFragment;
    "_resourceIDToHandlerAddress(bytes32)": FunctionFragment;
    "_specialFee(uint8)": FunctionFragment;
    "_totalOperators()": FunctionFragment;
    "_totalProposals()": FunctionFragment;
    "_totalRelayers()": FunctionFragment;
    "_wtokenAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "isRelayer(address)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "renounceAdmin(address)": FunctionFragment;
    "adminPauseTransfers()": FunctionFragment;
    "adminUnpauseTransfers()": FunctionFragment;
    "adminChangeRelayerThreshold(uint256)": FunctionFragment;
    "adminAddRelayer(address)": FunctionFragment;
    "adminRemoveRelayer(address)": FunctionFragment;
    "adminAddOperator(address)": FunctionFragment;
    "adminRemoveOperator(address)": FunctionFragment;
    "adminSetResource(address,bytes32,address)": FunctionFragment;
    "adminSetGenericResource(address,bytes32,address,bytes4,uint256,bytes4)": FunctionFragment;
    "adminSetBurnable(address,address)": FunctionFragment;
    "getProposal(uint8,uint64,bytes32)": FunctionFragment;
    "adminChangeFee(uint256)": FunctionFragment;
    "adminChangeSpecialFee(uint256,uint8)": FunctionFragment;
    "getFee(uint8)": FunctionFragment;
    "adminUpdateBridgeAddress(address,address)": FunctionFragment;
    "adminWithdraw(address,address,address,uint256)": FunctionFragment;
    "deposit(uint8,bytes32,bytes)": FunctionFragment;
    "depositETH(uint8,bytes32,bytes)": FunctionFragment;
    "voteProposal(uint8,uint64,bytes32,bytes32)": FunctionFragment;
    "cancelProposal(uint8,uint64,bytes32)": FunctionFragment;
    "executeProposal(uint8,uint64,bytes,bytes32)": FunctionFragment;
    "transferFunds(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "RELAYER_ROLE"
      | "_chainID"
      | "_depositCounts"
      | "_depositRecords"
      | "_expiry"
      | "_fee"
      | "_hasVotedOnProposal"
      | "_proposals"
      | "_relayerThreshold"
      | "_resourceIDToHandlerAddress"
      | "_specialFee"
      | "_totalOperators"
      | "_totalProposals"
      | "_totalRelayers"
      | "_wtokenAddress"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "isRelayer"
      | "isOperator"
      | "renounceAdmin"
      | "adminPauseTransfers"
      | "adminUnpauseTransfers"
      | "adminChangeRelayerThreshold"
      | "adminAddRelayer"
      | "adminRemoveRelayer"
      | "adminAddOperator"
      | "adminRemoveOperator"
      | "adminSetResource"
      | "adminSetGenericResource"
      | "adminSetBurnable"
      | "getProposal"
      | "adminChangeFee"
      | "adminChangeSpecialFee"
      | "getFee"
      | "adminUpdateBridgeAddress"
      | "adminWithdraw"
      | "deposit"
      | "depositETH"
      | "voteProposal"
      | "cancelProposal"
      | "executeProposal"
      | "transferFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELAYER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_chainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_depositCounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_depositRecords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "_expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "_fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_hasVotedOnProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_proposals",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_relayerThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_resourceIDToHandlerAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_specialFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_totalOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_wtokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminPauseTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminUnpauseTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeRelayerThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveRelayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetResource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetGenericResource",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminSetBurnable",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminChangeSpecialFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminUpdateBridgeAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFunds",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELAYER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_chainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_depositCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_depositRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hasVotedOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_relayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_resourceIDToHandlerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_specialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_wtokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRelayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminPauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminUnpauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeRelayerThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetGenericResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminSetBurnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminChangeSpecialFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminUpdateBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFunds",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(uint8,bytes32,uint64)": EventFragment;
    "OperatorAdded(address)": EventFragment;
    "OperatorRemoved(address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProposalEvent(uint8,uint64,uint8,bytes32,bytes32)": EventFragment;
    "ProposalVote(uint8,uint64,uint8,bytes32)": EventFragment;
    "RelayerAdded(address)": EventFragment;
    "RelayerRemoved(address)": EventFragment;
    "RelayerThresholdChanged(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DepositEventObject {
  destinationChainID: number;
  resourceID: string;
  depositNonce: BigNumber;
}
export type DepositEvent = TypedEvent<
  [number, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OperatorAddedEventObject {
  operator: string;
}
export type OperatorAddedEvent = TypedEvent<[string], OperatorAddedEventObject>;

export type OperatorAddedEventFilter = TypedEventFilter<OperatorAddedEvent>;

export interface OperatorRemovedEventObject {
  operator: string;
}
export type OperatorRemovedEvent = TypedEvent<
  [string],
  OperatorRemovedEventObject
>;

export type OperatorRemovedEventFilter = TypedEventFilter<OperatorRemovedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProposalEventEventObject {
  originChainID: number;
  depositNonce: BigNumber;
  status: number;
  resourceID: string;
  dataHash: string;
}
export type ProposalEventEvent = TypedEvent<
  [number, BigNumber, number, string, string],
  ProposalEventEventObject
>;

export type ProposalEventEventFilter = TypedEventFilter<ProposalEventEvent>;

export interface ProposalVoteEventObject {
  originChainID: number;
  depositNonce: BigNumber;
  status: number;
  resourceID: string;
}
export type ProposalVoteEvent = TypedEvent<
  [number, BigNumber, number, string],
  ProposalVoteEventObject
>;

export type ProposalVoteEventFilter = TypedEventFilter<ProposalVoteEvent>;

export interface RelayerAddedEventObject {
  relayer: string;
}
export type RelayerAddedEvent = TypedEvent<[string], RelayerAddedEventObject>;

export type RelayerAddedEventFilter = TypedEventFilter<RelayerAddedEvent>;

export interface RelayerRemovedEventObject {
  relayer: string;
}
export type RelayerRemovedEvent = TypedEvent<
  [string],
  RelayerRemovedEventObject
>;

export type RelayerRemovedEventFilter = TypedEventFilter<RelayerRemovedEvent>;

export interface RelayerThresholdChangedEventObject {
  newThreshold: BigNumber;
}
export type RelayerThresholdChangedEvent = TypedEvent<
  [BigNumber],
  RelayerThresholdChangedEventObject
>;

export type RelayerThresholdChangedEventFilter =
  TypedEventFilter<RelayerThresholdChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _chainID(overrides?: CallOverrides): Promise<[number]>;

    _depositCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _depositRecords(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    _fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _hasVotedOnProposal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _proposals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        _resourceID: string;
        _dataHash: string;
        _status: number;
        _proposedBlock: BigNumber;
      }
    >;

    _relayerThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    _resourceIDToHandlerAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _specialFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _totalOperators(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalProposals(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalRelayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    _wtokenAddress(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns true if {operator} has the operator role.
     * @param operator Address to check.
     */
    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Grants {operatorAddress} the relayer role and increases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorAdded} event.
     * @param operatorAddress Address of operator to be added.
     */
    adminAddOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Removes operator role for {operatorAddress} and decreases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorRemoved} event.
     * @param operatorAddress Address of relayer to be removed.
     */
    adminRemoveOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      depositFunctionSig: PromiseOrValue<BytesLike>,
      depositFunctionDepositerOffset: PromiseOrValue<BigNumberish>,
      executeFunctionSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Bridge.ProposalStructOutput]>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param chainID Value {_specialFeeChainID} will be updated to
     * @param newFee Value {_specialFee} will be updated to.
     */
    adminChangeSpecialFee(
      newFee: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFee(
      destinationChainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param handlerAddress Address of handler to withdraw from.
     * @param newBridgeAddress Address of the updated _bridgeAddress.
     */
    adminUpdateBridgeAddress(
      handlerAddress: PromiseOrValue<string>,
      newBridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amountOrTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    depositETH(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      resourceID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

  _chainID(overrides?: CallOverrides): Promise<number>;

  _depositCounts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _depositRecords(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  _expiry(overrides?: CallOverrides): Promise<BigNumber>;

  _fee(overrides?: CallOverrides): Promise<BigNumber>;

  _hasVotedOnProposal(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _proposals(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber] & {
      _resourceID: string;
      _dataHash: string;
      _status: number;
      _proposedBlock: BigNumber;
    }
  >;

  _relayerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  _resourceIDToHandlerAddress(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  _specialFee(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _totalOperators(overrides?: CallOverrides): Promise<BigNumber>;

  _totalProposals(overrides?: CallOverrides): Promise<BigNumber>;

  _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

  _wtokenAddress(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.
   */
  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if {relayer} has the relayer role.
   * @param relayer Address to check.
   */
  isRelayer(
    relayer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns true if {operator} has the operator role.
   * @param operator Address to check.
   */
  isOperator(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
   * @param newAdmin Address that admin role will be granted to.
   */
  renounceAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  adminPauseTransfers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
   */
  adminUnpauseTransfers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
   * @param newThreshold Value {_relayerThreshold} will be changed to.
   */
  adminChangeRelayerThreshold(
    newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
   * @param relayerAddress Address of relayer to be added.
   */
  adminAddRelayer(
    relayerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
   * @param relayerAddress Address of relayer to be removed.
   */
  adminRemoveRelayer(
    relayerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Grants {operatorAddress} the relayer role and increases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorAdded} event.
   * @param operatorAddress Address of operator to be added.
   */
  adminAddOperator(
    operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Removes operator role for {operatorAddress} and decreases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorRemoved} event.
   * @param operatorAddress Address of relayer to be removed.
   */
  adminRemoveOperator(
    operatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  adminSetResource(
    handlerAddress: PromiseOrValue<string>,
    resourceID: PromiseOrValue<BytesLike>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
   * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
   * @param handlerAddress Address of handler resource will be set for.
   * @param resourceID ResourceID to be used when making deposits.
   */
  adminSetGenericResource(
    handlerAddress: PromiseOrValue<string>,
    resourceID: PromiseOrValue<BytesLike>,
    contractAddress: PromiseOrValue<string>,
    depositFunctionSig: PromiseOrValue<BytesLike>,
    depositFunctionDepositerOffset: PromiseOrValue<BigNumberish>,
    executeFunctionSig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
   * @param handlerAddress Address of handler resource will be set for.
   * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
   */
  adminSetBurnable(
    handlerAddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns a proposal.
   * @param dataHash Hash of data to be provided when deposit proposal is executed.
   * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
   * @param originChainID Chain ID deposit originated from.
   */
  getProposal(
    originChainID: PromiseOrValue<BigNumberish>,
    depositNonce: PromiseOrValue<BigNumberish>,
    dataHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Bridge.ProposalStructOutput>;

  /**
   * Changes deposit fee.Only callable by admin.
   * @param newFee Value {_fee} will be updated to.
   */
  adminChangeFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Changes deposit fee.Only callable by admin.
   * @param chainID Value {_specialFeeChainID} will be updated to
   * @param newFee Value {_specialFee} will be updated to.
   */
  adminChangeSpecialFee(
    newFee: PromiseOrValue<BigNumberish>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFee(
    destinationChainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Used to manually withdraw funds from ERC safes.
   * @param handlerAddress Address of handler to withdraw from.
   * @param newBridgeAddress Address of the updated _bridgeAddress.
   */
  adminUpdateBridgeAddress(
    handlerAddress: PromiseOrValue<string>,
    newBridgeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Used to manually withdraw funds from ERC safes.
   * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
   * @param handlerAddress Address of handler to withdraw from.
   * @param recipient Address to withdraw tokens to.
   * @param tokenAddress Address of token to withdraw.
   */
  adminWithdraw(
    handlerAddress: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amountOrTokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
   * @param data Additional data to be passed to specified handler.
   * @param destinationChainID ID of chain deposit will be bridged to.
   * @param resourceID ResourceID used to find address of handler to be used for deposit.
   */
  deposit(
    destinationChainID: PromiseOrValue<BigNumberish>,
    resourceID: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
   * @param data Additional data to be passed to specified handler.
   * @param destinationChainID ID of chain deposit will be bridged to.
   * @param resourceID ResourceID used to find address of handler to be used for deposit.
   */
  depositETH(
    destinationChainID: PromiseOrValue<BigNumberish>,
    resourceID: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  voteProposal(
    chainID: PromiseOrValue<BigNumberish>,
    depositNonce: PromiseOrValue<BigNumberish>,
    resourceID: PromiseOrValue<BytesLike>,
    dataHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
   * @param chainID ID of chain deposit originated from.
   * @param dataHash Hash of data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   */
  cancelProposal(
    chainID: PromiseOrValue<BigNumberish>,
    depositNonce: PromiseOrValue<BigNumberish>,
    dataHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
   * @param chainID ID of chain deposit originated from.
   * @param data Data originally provided when deposit was made.
   * @param depositNonce ID of deposited generated by origin Bridge contract.
   * @param resourceID ResourceID to be used when making deposits.
   */
  executeProposal(
    chainID: PromiseOrValue<BigNumberish>,
    depositNonce: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    resourceID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
   * @param addrs Array of addresses to transfer {amounts} to.
   * @param amounts Array of amonuts to transfer to {addrs}.
   */
  transferFunds(
    addrs: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<string>;

    _chainID(overrides?: CallOverrides): Promise<number>;

    _depositCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _depositRecords(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    _expiry(overrides?: CallOverrides): Promise<BigNumber>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _hasVotedOnProposal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _proposals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        _resourceID: string;
        _dataHash: string;
        _status: number;
        _proposedBlock: BigNumber;
      }
    >;

    _relayerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    _resourceIDToHandlerAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    _specialFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _totalOperators(overrides?: CallOverrides): Promise<BigNumber>;

    _totalProposals(overrides?: CallOverrides): Promise<BigNumber>;

    _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    _wtokenAddress(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns true if {operator} has the operator role.
     * @param operator Address to check.
     */
    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(overrides?: CallOverrides): Promise<void>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(overrides?: CallOverrides): Promise<void>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Grants {operatorAddress} the relayer role and increases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorAdded} event.
     * @param operatorAddress Address of operator to be added.
     */
    adminAddOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Removes operator role for {operatorAddress} and decreases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorRemoved} event.
     * @param operatorAddress Address of relayer to be removed.
     */
    adminRemoveOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      depositFunctionSig: PromiseOrValue<BytesLike>,
      depositFunctionDepositerOffset: PromiseOrValue<BigNumberish>,
      executeFunctionSig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Bridge.ProposalStructOutput>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param chainID Value {_specialFeeChainID} will be updated to
     * @param newFee Value {_specialFee} will be updated to.
     */
    adminChangeSpecialFee(
      newFee: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(
      destinationChainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param handlerAddress Address of handler to withdraw from.
     * @param newBridgeAddress Address of the updated _bridgeAddress.
     */
    adminUpdateBridgeAddress(
      handlerAddress: PromiseOrValue<string>,
      newBridgeAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amountOrTokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    depositETH(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      resourceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(uint8,bytes32,uint64)"(
      destinationChainID?: PromiseOrValue<BigNumberish> | null,
      resourceID?: PromiseOrValue<BytesLike> | null,
      depositNonce?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;
    Deposit(
      destinationChainID?: PromiseOrValue<BigNumberish> | null,
      resourceID?: PromiseOrValue<BytesLike> | null,
      depositNonce?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;

    "OperatorAdded(address)"(
      operator?: PromiseOrValue<string> | null
    ): OperatorAddedEventFilter;
    OperatorAdded(
      operator?: PromiseOrValue<string> | null
    ): OperatorAddedEventFilter;

    "OperatorRemoved(address)"(
      operator?: PromiseOrValue<string> | null
    ): OperatorRemovedEventFilter;
    OperatorRemoved(
      operator?: PromiseOrValue<string> | null
    ): OperatorRemovedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProposalEvent(uint8,uint64,uint8,bytes32,bytes32)"(
      originChainID?: PromiseOrValue<BigNumberish> | null,
      depositNonce?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<BigNumberish> | null,
      resourceID?: null,
      dataHash?: null
    ): ProposalEventEventFilter;
    ProposalEvent(
      originChainID?: PromiseOrValue<BigNumberish> | null,
      depositNonce?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<BigNumberish> | null,
      resourceID?: null,
      dataHash?: null
    ): ProposalEventEventFilter;

    "ProposalVote(uint8,uint64,uint8,bytes32)"(
      originChainID?: PromiseOrValue<BigNumberish> | null,
      depositNonce?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<BigNumberish> | null,
      resourceID?: null
    ): ProposalVoteEventFilter;
    ProposalVote(
      originChainID?: PromiseOrValue<BigNumberish> | null,
      depositNonce?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<BigNumberish> | null,
      resourceID?: null
    ): ProposalVoteEventFilter;

    "RelayerAdded(address)"(
      relayer?: PromiseOrValue<string> | null
    ): RelayerAddedEventFilter;
    RelayerAdded(
      relayer?: PromiseOrValue<string> | null
    ): RelayerAddedEventFilter;

    "RelayerRemoved(address)"(
      relayer?: PromiseOrValue<string> | null
    ): RelayerRemovedEventFilter;
    RelayerRemoved(
      relayer?: PromiseOrValue<string> | null
    ): RelayerRemovedEventFilter;

    "RelayerThresholdChanged(uint256)"(
      newThreshold?: PromiseOrValue<BigNumberish> | null
    ): RelayerThresholdChangedEventFilter;
    RelayerThresholdChanged(
      newThreshold?: PromiseOrValue<BigNumberish> | null
    ): RelayerThresholdChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _chainID(overrides?: CallOverrides): Promise<BigNumber>;

    _depositCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _depositRecords(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _expiry(overrides?: CallOverrides): Promise<BigNumber>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _hasVotedOnProposal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _proposals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _relayerThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    _resourceIDToHandlerAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _specialFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _totalOperators(overrides?: CallOverrides): Promise<BigNumber>;

    _totalProposals(overrides?: CallOverrides): Promise<BigNumber>;

    _totalRelayers(overrides?: CallOverrides): Promise<BigNumber>;

    _wtokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if {operator} has the operator role.
     * @param operator Address to check.
     */
    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Grants {operatorAddress} the relayer role and increases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorAdded} event.
     * @param operatorAddress Address of operator to be added.
     */
    adminAddOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Removes operator role for {operatorAddress} and decreases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorRemoved} event.
     * @param operatorAddress Address of relayer to be removed.
     */
    adminRemoveOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      depositFunctionSig: PromiseOrValue<BytesLike>,
      depositFunctionDepositerOffset: PromiseOrValue<BigNumberish>,
      executeFunctionSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param chainID Value {_specialFeeChainID} will be updated to
     * @param newFee Value {_specialFee} will be updated to.
     */
    adminChangeSpecialFee(
      newFee: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFee(
      destinationChainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param handlerAddress Address of handler to withdraw from.
     * @param newBridgeAddress Address of the updated _bridgeAddress.
     */
    adminUpdateBridgeAddress(
      handlerAddress: PromiseOrValue<string>,
      newBridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amountOrTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    depositETH(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      resourceID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RELAYER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _depositCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _depositRecords(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _hasVotedOnProposal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _proposals(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _relayerThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _resourceIDToHandlerAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _specialFee(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _totalOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalRelayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _wtokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the contract is paused, and false otherwise.
     */
    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if {relayer} has the relayer role.
     * @param relayer Address to check.
     */
    isRelayer(
      relayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if {operator} has the operator role.
     * @param operator Address to check.
     */
    isOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.
     * @param newAdmin Address that admin role will be granted to.
     */
    renounceAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminPauseTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.
     */
    adminUnpauseTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.
     * @param newThreshold Value {_relayerThreshold} will be changed to.
     */
    adminChangeRelayerThreshold(
      newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.
     * @param relayerAddress Address of relayer to be added.
     */
    adminAddRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.
     * @param relayerAddress Address of relayer to be removed.
     */
    adminRemoveRelayer(
      relayerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Grants {operatorAddress} the relayer role and increases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorAdded} event.
     * @param operatorAddress Address of operator to be added.
     */
    adminAddOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes operator role for {operatorAddress} and decreases {_totalOperator} count.Only callable by an address that currently has the admin role.Emits {OperatorRemoved} event.
     * @param operatorAddress Address of relayer to be removed.
     */
    adminRemoveOperator(
      operatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.
     * @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.
     * @param handlerAddress Address of handler resource will be set for.
     * @param resourceID ResourceID to be used when making deposits.
     */
    adminSetGenericResource(
      handlerAddress: PromiseOrValue<string>,
      resourceID: PromiseOrValue<BytesLike>,
      contractAddress: PromiseOrValue<string>,
      depositFunctionSig: PromiseOrValue<BytesLike>,
      depositFunctionDepositerOffset: PromiseOrValue<BigNumberish>,
      executeFunctionSig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.
     * @param handlerAddress Address of handler resource will be set for.
     * @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.
     */
    adminSetBurnable(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a proposal.
     * @param dataHash Hash of data to be provided when deposit proposal is executed.
     * @param depositNonce ID of proposal generated by proposal's origin Bridge contract.
     * @param originChainID Chain ID deposit originated from.
     */
    getProposal(
      originChainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param newFee Value {_fee} will be updated to.
     */
    adminChangeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Changes deposit fee.Only callable by admin.
     * @param chainID Value {_specialFeeChainID} will be updated to
     * @param newFee Value {_specialFee} will be updated to.
     */
    adminChangeSpecialFee(
      newFee: PromiseOrValue<BigNumberish>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFee(
      destinationChainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param handlerAddress Address of handler to withdraw from.
     * @param newBridgeAddress Address of the updated _bridgeAddress.
     */
    adminUpdateBridgeAddress(
      handlerAddress: PromiseOrValue<string>,
      newBridgeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Used to manually withdraw funds from ERC safes.
     * @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.
     * @param handlerAddress Address of handler to withdraw from.
     * @param recipient Address to withdraw tokens to.
     * @param tokenAddress Address of token to withdraw.
     */
    adminWithdraw(
      handlerAddress: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amountOrTokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    deposit(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.
     * @param data Additional data to be passed to specified handler.
     * @param destinationChainID ID of chain deposit will be bridged to.
     * @param resourceID ResourceID used to find address of handler to be used for deposit.
     */
    depositETH(
      destinationChainID: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    voteProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      resourceID: PromiseOrValue<BytesLike>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.
     * @param chainID ID of chain deposit originated from.
     * @param dataHash Hash of data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     */
    cancelProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      dataHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.
     * @param chainID ID of chain deposit originated from.
     * @param data Data originally provided when deposit was made.
     * @param depositNonce ID of deposited generated by origin Bridge contract.
     * @param resourceID ResourceID to be used when making deposits.
     */
    executeProposal(
      chainID: PromiseOrValue<BigNumberish>,
      depositNonce: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      resourceID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.
     * @param addrs Array of addresses to transfer {amounts} to.
     * @param amounts Array of amonuts to transfer to {addrs}.
     */
    transferFunds(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
